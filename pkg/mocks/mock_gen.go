// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/starnuik/avito_pvz/pkg/gen (interfaces: Gen)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_gen.go -package=mocks github.com/starnuik/avito_pvz/pkg/gen Gen
//

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockGen is a mock of Gen interface.
type MockGen struct {
	ctrl     *gomock.Controller
	recorder *MockGenMockRecorder
	isgomock struct{}
}

// MockGenMockRecorder is the mock recorder for MockGen.
type MockGenMockRecorder struct {
	mock *MockGen
}

// NewMockGen creates a new mock instance.
func NewMockGen(ctrl *gomock.Controller) *MockGen {
	mock := &MockGen{ctrl: ctrl}
	mock.recorder = &MockGenMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGen) EXPECT() *MockGenMockRecorder {
	return m.recorder
}

// Now mocks base method.
func (m *MockGen) Now() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Now")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// Now indicates an expected call of Now.
func (mr *MockGenMockRecorder) Now() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Now", reflect.TypeOf((*MockGen)(nil).Now))
}

// Uuid mocks base method.
func (m *MockGen) Uuid() (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uuid")
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Uuid indicates an expected call of Uuid.
func (mr *MockGenMockRecorder) Uuid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uuid", reflect.TypeOf((*MockGen)(nil).Uuid))
}
