// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/starnuik/avito_pvz/pkg/repository (interfaces: Repository)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/mock_repository.go -package=mocks github.com/starnuik/avito_pvz/pkg/repository Repository
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	entity "github.com/starnuik/avito_pvz/pkg/entity"
	repository "github.com/starnuik/avito_pvz/pkg/repository"
	gomock "go.uber.org/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
	isgomock struct{}
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateProduct mocks base method.
func (m *MockRepository) CreateProduct(ctx context.Context, product entity.Product) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateProduct", ctx, product)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateProduct indicates an expected call of CreateProduct.
func (mr *MockRepositoryMockRecorder) CreateProduct(ctx, product any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateProduct", reflect.TypeOf((*MockRepository)(nil).CreateProduct), ctx, product)
}

// CreatePvz mocks base method.
func (m *MockRepository) CreatePvz(ctx context.Context, pvz entity.Pvz) (entity.Pvz, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePvz", ctx, pvz)
	ret0, _ := ret[0].(entity.Pvz)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePvz indicates an expected call of CreatePvz.
func (mr *MockRepositoryMockRecorder) CreatePvz(ctx, pvz any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePvz", reflect.TypeOf((*MockRepository)(nil).CreatePvz), ctx, pvz)
}

// CreateReception mocks base method.
func (m *MockRepository) CreateReception(ctx context.Context, reception entity.Reception) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateReception", ctx, reception)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateReception indicates an expected call of CreateReception.
func (mr *MockRepositoryMockRecorder) CreateReception(ctx, reception any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateReception", reflect.TypeOf((*MockRepository)(nil).CreateReception), ctx, reception)
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, user entity.User) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, user)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, user)
}

// DeleteProduct mocks base method.
func (m *MockRepository) DeleteProduct(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteProduct", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteProduct indicates an expected call of DeleteProduct.
func (mr *MockRepositoryMockRecorder) DeleteProduct(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteProduct", reflect.TypeOf((*MockRepository)(nil).DeleteProduct), ctx, id)
}

// GetLastProduct mocks base method.
func (m *MockRepository) GetLastProduct(ctx context.Context, pvzId uuid.UUID) (entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastProduct", ctx, pvzId)
	ret0, _ := ret[0].(entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastProduct indicates an expected call of GetLastProduct.
func (mr *MockRepositoryMockRecorder) GetLastProduct(ctx, pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastProduct", reflect.TypeOf((*MockRepository)(nil).GetLastProduct), ctx, pvzId)
}

// GetOpenReception mocks base method.
func (m *MockRepository) GetOpenReception(ctx context.Context, pvzId uuid.UUID) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOpenReception", ctx, pvzId)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOpenReception indicates an expected call of GetOpenReception.
func (mr *MockRepositoryMockRecorder) GetOpenReception(ctx, pvzId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOpenReception", reflect.TypeOf((*MockRepository)(nil).GetOpenReception), ctx, pvzId)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(ctx context.Context, email string) (entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", ctx, email)
	ret0, _ := ret[0].(entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), ctx, email)
}

// LockPvz mocks base method.
func (m *MockRepository) LockPvz(ctx context.Context, id uuid.UUID, lock repository.DbLock) (repository.Tx, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LockPvz", ctx, id, lock)
	ret0, _ := ret[0].(repository.Tx)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LockPvz indicates an expected call of LockPvz.
func (mr *MockRepositoryMockRecorder) LockPvz(ctx, id, lock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LockPvz", reflect.TypeOf((*MockRepository)(nil).LockPvz), ctx, id, lock)
}

// UpdateReceptionStatus mocks base method.
func (m *MockRepository) UpdateReceptionStatus(ctx context.Context, id uuid.UUID, status entity.ReceptionStatus) (entity.Reception, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateReceptionStatus", ctx, id, status)
	ret0, _ := ret[0].(entity.Reception)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateReceptionStatus indicates an expected call of UpdateReceptionStatus.
func (mr *MockRepositoryMockRecorder) UpdateReceptionStatus(ctx, id, status any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateReceptionStatus", reflect.TypeOf((*MockRepository)(nil).UpdateReceptionStatus), ctx, id, status)
}
